<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on thinkerou</title>
    <link>https://thinkerou.com/categories/%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 测试 on thinkerou</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://thinkerou.com/categories/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从开源项目中悟到了什么？</title>
      <link>https://thinkerou.com/post/think-essay-1/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://thinkerou.com/post/think-essay-1/</guid>
      <description>最近业余时间都在学习 grpc 相关的东西，由于本身对 RPC 的了解还很浅显，所以本文不谈 grpc 相关的东西，聊聊从中体会到的个人感受。
1. 如何参与到开源项目中来？ 要参与进来首先得保持一定的兴趣，兴趣是最好的老师嘛，虽然我是刚刚参与并且没有任何有质量的 Pull Request 被接受，但还是总结下个人的做法：
 学习项目的架构，通常都有详细的文档  如果没有详细的文档，这里其实就可以做些事情，弄懂后写份文档，项目是英文就用英文写，这也是很大的能力提供。  学会项目的使用，通常都有 example 代码  同样，没有的话，就可以编写，然后提交  读代码，然后提 Pull Request  通常从简单的、依赖少的代码开始 如果有 TODO 的话，可以尝试完成，测试通过后提交  反复读代码，读懂代码  在这基础上，记录自己的思考，并提 issue 跟别人沟通 如果想法有用，尝试实现并提交 沟通别人提的 issue 并尝试解决   个人觉得能按这种步骤来的话，还是对个人成长有帮助的。
2. 从开源项目中悟到了什么？ 结合对 grpc 的了解和我在地铁路上的随想，记录下个人的想法，虽然想法在公司内部项目实施起来不太靠谱。
不管是 Facebook（Facebook是如何做自动化测试的？） 也好 Badoo（Badoo 告诉你切换到 PHP7 节省了 100 万美元）也罢，在项目升级过程中都强调单元测试、自动化测试用例有多少条、覆盖率达到了多少等，说明测试用例的积累的重要性可见一般，在后续的回归、升级过程中起到强有力的保证作用。
在看看 grpc 等开源项目也是有大量的单元测试、自动化测试用例，也只有这样才能做到让更多的开发者参与的同时保证代码的质量和正确性。
由此，联想到的公司项目的一种参与方式：
 编写大量的初始单元测试、自动化测试用例  至于谁来编写可以根据项目组来定  将用例放入持续集成平台进行定时、条件触发执行 项目组所有人参与代码提交  模块负责人负责审阅提交 对于QA来说也可以参与进来  将代码在公司范围内开源  在 KPI 满天飞的年代可能别人不愿意提交 要是有奖励措施了可能就失去了开源的本意了   这些都是我个人的想法，或许你们赞同或不赞同，一看而过吧！</description>
    </item>
    
  </channel>
</rss>